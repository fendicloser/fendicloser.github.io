<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longfu Sun</title>
  
  <subtitle>Live a life you will remember</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fendicloser.top/"/>
  <updated>2019-03-10T07:10:11.958Z</updated>
  <id>http://fendicloser.top/</id>
  
  <author>
    <name>Longfu Sun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css双飞翼布局、圣杯布局、动画（2）</title>
    <link href="http://fendicloser.top/2019/03/10/css%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%E3%80%81%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E3%80%81%E5%8A%A8%E7%94%BB%EF%BC%882%EF%BC%89/"/>
    <id>http://fendicloser.top/2019/03/10/css双飞翼布局、圣杯布局、动画（2）/</id>
    <published>2019-03-10T07:03:43.000Z</published>
    <updated>2019-03-10T07:10:11.958Z</updated>
    
    <content type="html"><![CDATA[<p>之后是动画，用最起初的css，我记得刚接触css的时候，看到有人说css是一种越用越发现它深奥的技术，看似简单其实能实现很丰富的样式。</p><p>首先看一下css动画的基本属性。<br>| 一个普通标题 | 一个普通标题 | 一个普通标题 |<br>| —— | —— | —— |<br>| 短文本 | 中等文本 | 稍微长一点的文本 |<br>| 稍微长一点的文本 | 短文本 | 中等文本 |</p><table><br>  <tr><br>    <th>Tables</th><br>    <th>Are</th><br>    <th>Cool</th><br>  </tr><br>  <tr><br>    <td>col 1 is</td><br>    <td>left-aligned</td><br>    <td>$1600</td><br>  </tr><br>  <tr><br>    <td>col 2 is</td><br>    <td>centered</td><br>    <td>$12</td><br>  </tr><br>  <tr><br>    <td>col 3 is</td><br>    <td>right-aligned</td><br>    <td>$1</td><br>  </tr><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之后是动画，用最起初的css，我记得刚接触css的时候，看到有人说css是一种越用越发现它深奥的技术，看似简单其实能实现很丰富的样式。&lt;/p&gt;
&lt;p&gt;首先看一下css动画的基本属性。&lt;br&gt;| 一个普通标题 | 一个普通标题 | 一个普通标题 |&lt;br&gt;| —— | —— 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS双飞翼布局、圣杯布局、动画</title>
    <link href="http://fendicloser.top/2019/03/03/css%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%E3%80%81%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E3%80%81%E5%8A%A8%E7%94%BB/"/>
    <id>http://fendicloser.top/2019/03/03/css双飞翼布局、圣杯布局、动画/</id>
    <published>2019-03-03T06:03:00.000Z</published>
    <updated>2019-03-03T13:54:36.309Z</updated>
    
    <content type="html"><![CDATA[<p>之前刚接触CSS的时候学习了圣杯布局和双飞翼布局的方法，以及用css动画生成loading画面。前两个布局是面试时候非常常被问到的css问题，而第二个则是在实际工作中非常常用的素材，这里简单讲一下基本思想并做一下备忘。<br>网上关于这三项的blog特别多，但是关键不是直接应用，而是记住如何设置和他们的设计步骤、设计思想</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">圣杯布局和双飞翼布局主要参考：</span><br><span class="line">https:<span class="comment">//www.cnblogs.com/imwtr/p/4441741.html</span></span><br><span class="line">https:<span class="comment">//www.cnblogs.com/lovemomo/p/4885866.html</span></span><br><span class="line">https:<span class="comment">//www.jianshu.com/p/f9bcddb0e8b4    尤其是这一篇，非常详细</span></span><br><span class="line">loading主要参考：腾讯课堂next课堂前端教程</span><br></pre></td></tr></table></figure><p>圣杯布局的基本思路,各个部分分别是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;header&gt;、&lt;container&gt;、&lt;middle&gt;、&lt;left&gt;、&lt;right&gt;、&lt;footer&gt;&quot;, </span><br><span class="line">其中&quot;&lt;middle&gt;、&lt;left&gt;、&lt;right&gt;是&lt;container&gt;&quot;的子元素.</span><br></pre></td></tr></table></figure></p><p>第一步先写出html结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步，先给上面的结构写基础css，注意：<middle>要先渲染，把<middle>的width设置成100%, 然后<middle>\<left>\<right>的float设置成left<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>&#123;<span class="attribute">background-color</span>: yellow;<span class="attribute">height</span>: <span class="number">40px</span>;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">overflow</span>: hidden&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">float</span>:left;<span class="attribute">background-color</span>: <span class="number">#f92672</span>&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">float</span>: left;<span class="attribute">background-color</span>: <span class="number">#1d9cf7</span>&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">float</span>:left;<span class="attribute">background-color</span>: <span class="number">#aaaaaa</span>&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;<span class="attribute">background-color</span>: <span class="number">#141414</span>;<span class="attribute">height</span>: <span class="number">40px</span>;<span class="attribute">width</span>: <span class="number">100px</span>&#125;</span><br></pre></td></tr></table></figure></right></left></middle></middle></middle></p><p>此时看到的应该是这样的<br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/step2.png" alt><br>此时看到的中间蓝色部分是middle，因为middle是新渲染的，left和right已经被挤压到下面去了。</p><p>第三步，所以下一步就是把想办法把left和right调上去。用到的css属性是margin-left，但是left和right的参数是不一样的：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">margin-left</span>:-<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">marign-left</span>:-<span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>这样左盒子才可以往最左边移动。这样右盒子才可以在一行的最右边显示出自己。<br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/step3.png" alt><br>当我们改变window的大小的时候，middle的大小就可以自适应了。</p><p>第四步，middle的大小还需要改变，因为middle两边的内容会被left和right挡住。</p><p>利用父级元素设置左右内边距的值，把父级的三个子盒子往中间挤。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123; <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;&#125; <span class="comment">/*这里的200px是左右盒子的宽度。*/</span></span><br></pre></td></tr></table></figure><p>我们可以看到，左右两边的内边距是有了，但是中间盒子上的内容还是被压着。</p><p>其次:给左右两个盒子加一个定位，加了定位之后左右两个盒子就可以设置left和right值。</p><p>代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123; <span class="attribute">position</span>: relative; <span class="attribute">left</span>: -<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">position</span>: relative;<span class="attribute">right</span>: -<span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>好的传统意义上的圣杯布局以及完成了，额外一点，这个时候middle中的文本内容还是会插入right里面，<br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/unfinished.png" alt><br>这个时候，可以：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.middle</span>&#123;<span class="attribute">word-break</span>: break-all;&#125;</span><br></pre></td></tr></table></figure></p><p>所以最终的结果就是这样的<br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/finished.png" alt></p><h3 id="然后是双飞翼布局"><a href="#然后是双飞翼布局" class="headerlink" title="然后是双飞翼布局"></a>然后是双飞翼布局</h3><p>同样是实现三栏布局<br>同样的，我们先仿照圣杯布局的写法写，但是在middle里面多加一层div，id是inside</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实现三栏水平布局之双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        header,</span></span><br><span class="line"><span class="undefined">        footer &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#75715e</span>;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        footer&#123;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inside"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得到的就是下面的布局<br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/shuang.png" alt><br>在此基础上，我们加上：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:-<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-id">#inside</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的结果就是<br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/shuang2.png" alt><br>这里其实有一个问题还不太明白，在圣杯布局中footer标签并没有用clear：both消除浮动，但是在双飞翼中，必须消除浮动。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>圣杯布局和双飞翼布局是非常经典的三栏布局解决方法，两者的区别就在于：如何解决middle栏的被遮罩的问题。<br>圣杯布局的方法是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*.container&#123; padding: 0 200px;&#125;*/</span></span><br><span class="line"><span class="selector-class">.container</span>&#123; <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;&#125;</span><br><span class="line"><span class="comment">/*其次:给左右两个盒子加一个定位，加了定位之后左右两个盒子就可以设置left和right值。*/</span></span><br><span class="line"><span class="selector-class">.left</span>&#123; <span class="attribute">position</span>: relative; <span class="attribute">left</span>: -<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">position</span>: relative;<span class="attribute">right</span>: -<span class="number">210px</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>双飞翼布局的方法就是上一段代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:-<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-id">#inside</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>loading动画本来是腾讯课堂next学院的一道题，对与当时刚接触css的我来说，感觉碉堡了，后来在工作中还真的用到了。<br>先看一下效果。</p><p><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/圆形.png" alt><br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/竖条.png" alt><br><img src="/2019/03/03/css双飞翼布局、圣杯布局、动画/多点.png" alt><br>三种图片的实现难度依次上升。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前刚接触CSS的时候学习了圣杯布局和双飞翼布局的方法，以及用css动画生成loading画面。前两个布局是面试时候非常常被问到的css问题，而第二个则是在实际工作中非常常用的素材，这里简单讲一下基本思想并做一下备忘。&lt;br&gt;网上关于这三项的blog特别多，但是关键不是直接
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原生js、jquery实现国际化的几种方法</title>
    <link href="http://fendicloser.top/2019/02/26/%E5%8E%9F%E7%94%9Fjs%E3%80%81jquery%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://fendicloser.top/2019/02/26/原生js、jquery实现国际化的几种方法/</id>
    <published>2019-02-26T07:56:24.000Z</published>
    <updated>2019-02-26T07:56:24.160Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScrip-ACSII码的迷之操作</title>
    <link href="http://fendicloser.top/2019/02/25/javascrip-acsii%E7%A0%81%E7%9A%84%E8%BF%B7%E4%B9%8B%E6%93%8D%E4%BD%9C/"/>
    <id>http://fendicloser.top/2019/02/25/javascrip-acsii码的迷之操作/</id>
    <published>2019-02-25T12:49:16.000Z</published>
    <updated>2019-02-25T15:30:39.218Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在接触acsii码，这种cs学生从大一第一周就开始接触的东西其实在实际应用中离我们非常遥远，如果你不做底层的东西可能永远都不会用到。可这种好事就被我碰上了，偏偏还不是底层操作，要用js，偏偏还不是十进制转换</p><p>有两个字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xM=<span class="string">'12'</span>  <span class="comment">//string '12'</span></span><br><span class="line"><span class="keyword">var</span> yM=<span class="string">'02'</span> <span class="comment">//string '02'</span></span><br></pre></td></tr></table></figure></p><p>对这两个用.charCodeAt(), .charCodeAt()返回字符串的十进制ascii码，对他用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">'02'</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="string">'12'</span></span><br><span class="line"><span class="built_in">console</span>.log(a.charCodeAt())</span><br><span class="line"><span class="built_in">console</span>.log(b.charCodeAt())</span><br><span class="line"><span class="built_in">console</span>.log((a.charCodeAt(<span class="number">1</span>)==b.charCodeAt(<span class="number">1</span>)),b.charCodeAt(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p>得到的结果是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\\<span class="number">48</span></span><br><span class="line">\\<span class="number">49</span></span><br><span class="line">\\<span class="literal">true</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>也就是说.charCodeAt()是有参数的，得到的是十进制的acsii码值，但是有的时候我们需要的不是十进制的ascii，比如蓝牙连接的时候需要的就是十六进制的ascii， 例如<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ab01#</span><br></pre></td></tr></table></figure></p><p>查阅ascii对照表，我们知道：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$:24 #:23 '0':30  '1':31</span></span><br><span class="line"><span class="comment">// 再加上a-&gt;'02'  b--&gt;'12'</span></span><br></pre></td></tr></table></figure></p><p>这里插一下字符串的截取方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">'02'</span>  </span><br><span class="line"><span class="keyword">var</span> b=<span class="string">'12'</span> </span><br><span class="line"><span class="keyword">var</span> a1=a.substring(<span class="number">1</span>,<span class="number">0</span>) <span class="comment">//截取到'0'</span></span><br><span class="line"><span class="keyword">var</span> a2=a.substr(<span class="number">1</span>)      <span class="comment">//截取到'1'</span></span><br><span class="line"><span class="keyword">var</span> b1=b.substring(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> b2=b.substr(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>ok，综合上面的方法把a和b转换成16进制acsii码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">'02'</span>  </span><br><span class="line"><span class="keyword">var</span> b=<span class="string">'12'</span> </span><br><span class="line"><span class="keyword">var</span> a1=a.substring(<span class="number">1</span>,<span class="number">0</span>).charCodeAt().toString(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">var</span> a2=a.substr(<span class="number">1</span>).charCodeAt().toString(<span class="number">16</span>)    </span><br><span class="line"><span class="keyword">var</span> b1=b.substring(<span class="number">1</span>,<span class="number">0</span>).charCodeAt().toString(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">var</span> b2=b.substr(<span class="number">1</span>).charCodeAt().toString(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'24'</span>+a1+a2+b1+b2+<span class="string">'3031'</span>)<span class="comment">//$ab01#</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一直在接触acsii码，这种cs学生从大一第一周就开始接触的东西其实在实际应用中离我们非常遥远，如果你不做底层的东西可能永远都不会用到。可这种好事就被我碰上了，偏偏还不是底层操作，要用js，偏偏还不是十进制转换&lt;/p&gt;
&lt;p&gt;有两个字符串：&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>express-router-ajax-post的实现</title>
    <link href="http://fendicloser.top/2019/02/25/express-router-ajax-post%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://fendicloser.top/2019/02/25/express-router-ajax-post的实现/</id>
    <published>2019-02-25T12:05:18.000Z</published>
    <updated>2019-02-25T12:42:18.458Z</updated>
    
    <content type="html"><![CDATA[<p>网上用node-express实现的ajax很多，但是都没有涉及到router，<br>这是在谢菲时我导师写的一个Dome，自己曾经多次尝试，但是总报错，这里记录一下</p><p>用intellij生成node应用，文件结构如下：<br><img src="/2019/02/25/express-router-ajax-post的实现/文件结构.png" alt></p><p>/bin/www不需要修改，但是app.js需要修改，因为post方法有请求体，在Nodejs原生的http模块中，请求体是要基于流的方式来接受和解析。<br>body-parser是一个HTTP请求体解析的中间件，使用这个模块可以解析JSON、Raw、文本、URL-encoded格式的请求体，<br>用npm start 安装body-parser即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser=<span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">'dev'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use(express.json());</span></span><br><span class="line"><span class="comment">// app.use(express.urlencoded(&#123; extended: false &#125;));</span></span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure><p>如代码所示，把express.json()和express.urlencoded({ extended: false })换成bodyParser.json和body-parser.urlencoded({ extended: false })就可以了，这里是express-node方法的关键</p><p>再看页面部分： 在views/index.ejs中<br>引入jquery：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>做一个表单，这里就是最简单的表单，名、姓、出生年份，submit后服务端可以通过出生年份计算出年龄，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">"xForm"</span> onsubmit=<span class="string">"onSubmit()"</span>&gt;</span><br><span class="line">      &lt;label <span class="keyword">for</span>=<span class="string">"firstname"</span>&gt;First name:&lt;/label&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> name=<span class="string">"firstname"</span> id=<span class="string">"firstname"</span> value=<span class="string">"longfu"</span>&gt;</span><br><span class="line">      &lt;p&gt;&lt;label for='lastname'&gt;Last name:&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"lastname"</span> id=<span class="string">"lastname"</span> value=<span class="string">"Sun"</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;&lt;label for='year'&gt;Year of Birth:&lt;/</span>label&gt;</span><br><span class="line">        &lt;input type=<span class="string">"number"</span> name=<span class="string">"year"</span> id=<span class="string">"year"</span> value=<span class="string">"1900"</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;&lt;input type="submit" name="g" value="Submit" id="g"&gt;&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="results" style="margin-top:120px"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><p>result div用来放服务端返回的json数据</p><p>接下来就是ajax了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onSubmit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> formArray=$(<span class="string">"form"</span>).serializeArray();</span><br><span class="line">        <span class="keyword">var</span> data=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>(index <span class="keyword">in</span> formArray)&#123;</span><br><span class="line">            data[formArray[index].name]=formArray[index].value;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        sendAjaxQuery(<span class="string">'/index'</span>,data)</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendAjaxQuery</span>(<span class="params">url,data</span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:url,</span><br><span class="line">            data:data,</span><br><span class="line">            dataType:<span class="string">'json'</span>,</span><br><span class="line">            type:<span class="string">'POST'</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">dataR</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ret=dataR;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).innerText=<span class="built_in">JSON</span>.stringify(ret)</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, status, error</span>) </span>&#123;</span><br><span class="line">                              alert(<span class="string">'Error: '</span> + error.message);</span><br><span class="line">                          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后是路由里面的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/index'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> userData = req.body;</span><br><span class="line">    <span class="keyword">if</span> (userData == <span class="literal">null</span>) &#123;</span><br><span class="line">        res.status(<span class="number">403</span>).send(<span class="string">'No data sent!'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isNumeric(userData.year)) &#123;</span><br><span class="line">        res.status(<span class="number">403</span>).send(<span class="string">'Year is invalid!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> year = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getFullYear()</span><br><span class="line">    userData.age = year - <span class="built_in">parseInt</span>(userData.year);</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">    res.send(<span class="built_in">JSON</span>.stringify(userData));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumeric</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上用node-express实现的ajax很多，但是都没有涉及到router，&lt;br&gt;这是在谢菲时我导师写的一个Dome，自己曾经多次尝试，但是总报错，这里记录一下&lt;/p&gt;
&lt;p&gt;用intellij生成node应用，文件结构如下：&lt;br&gt;&lt;img src=&quot;/2019/0
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-native虚拟dom动态循环生成组件</title>
    <link href="http://fendicloser.top/2019/02/21/react-native%E8%99%9A%E6%8B%9Fdom%E5%8A%A8%E6%80%81%E5%BE%AA%E7%8E%AF%E7%94%9F%E6%88%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://fendicloser.top/2019/02/21/react-native虚拟dom动态循环生成组件/</id>
    <published>2019-02-21T15:05:38.000Z</published>
    <updated>2019-02-21T15:23:01.755Z</updated>
    
    <content type="html"><![CDATA[<p>使用react做了三个项目了，慢慢的感受到了虚拟dom的便利，但是稍有稍有不慎还是会报错</p><p>#<br>#<br>#<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123;View,Text,StyleSheet, Dimensions,TouchableOpacity, Alert,Platform,ScrollView,Image,Button,&#125; <span class="keyword">from</span> <span class="string">"react-native"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;ColorWheel&#125; <span class="keyword">from</span> <span class="string">'react-native-color-wheel'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> width=Dimensions.get(<span class="string">'window'</span>).width;</span><br><span class="line"><span class="keyword">var</span> height=Dimensions.get(<span class="string">'window'</span>).height;</span><br><span class="line"><span class="keyword">var</span> buttonArea=height/<span class="number">4</span><span class="number">-10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Orientation <span class="keyword">from</span> <span class="string">'react-native-orientation'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">colorScreen</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            receiveData:<span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.arrLeftTrangle=[]</span><br><span class="line">        <span class="keyword">this</span>.arrRightTrangle=[]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">this</span>.arrLeftTrangle.push(</span><br><span class="line">                &lt;View key=&#123;i&#125;</span><br><span class="line">                      style=&#123;&#123;<span class="attr">width</span>: <span class="number">0</span>, <span class="attr">height</span>: <span class="number">0</span>, <span class="attr">borderColor</span>: <span class="string">'transparent'</span>, <span class="attr">borderTopWidth</span>: <span class="number">15</span>, <span class="attr">borderBottomWidth</span>: <span class="number">15</span>, <span class="attr">borderRightWidth</span>: <span class="number">30</span>, <span class="attr">borderRightColor</span>: <span class="string">'skyblue'</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">            this.arrRightTrangle.push(</span></span><br><span class="line"><span class="regexp">                &lt;View key=&#123;i&#125;</span></span><br><span class="line"><span class="regexp">                      style=&#123;&#123;width: 0, height: 0, borderColor: 'transparent', borderTopWidth: 15, borderBottomWidth: 15, borderLeftWidth: 30, borderLeftColor: 'skyblue'&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>View&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        Orientation.lockToLandscape()</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        Orientation.lockToLandscape()</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;View style=&#123;&#123;<span class="attr">flexDirection</span>:<span class="string">'row'</span>,<span class="attr">alignItems</span>: <span class="string">'center'</span>,<span class="attr">justifyContent</span>: <span class="string">'center'</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;View style=&#123;&#123;<span class="attr">justifyContent</span>:<span class="string">'flex-end'</span>,<span class="attr">flexDirection</span>:<span class="string">'row'</span>,<span class="attr">backgroundColor</span>:<span class="string">'red'</span>,<span class="attr">height</span>:width/<span class="number">10</span>*<span class="number">8</span>,<span class="attr">width</span>:height/<span class="number">4</span><span class="number">-10</span>&#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;View style=&#123;&#123;<span class="attr">alignItems</span>:<span class="string">'center'</span>,<span class="attr">justifyContent</span>:<span class="string">'space-around'</span>,<span class="attr">backgroundColor</span>:<span class="string">'black'</span>,<span class="attr">width</span>:<span class="number">30</span>,<span class="attr">height</span>:width/<span class="number">10</span>*<span class="number">8</span><span class="number">-10</span>&#125;&#125;&gt;</span><br><span class="line">                        &#123;<span class="keyword">this</span>.arrLeftTrangle&#125;</span><br><span class="line">                    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>View&gt;</span><br><span class="line"></span><br><span class="line">                &lt;View style=&#123;&#123;<span class="attr">flexDirection</span>:<span class="string">'row'</span>,<span class="attr">justifyContent</span>:<span class="string">'flex-start'</span>,<span class="attr">backgroundColor</span>:<span class="string">'red'</span>,<span class="attr">height</span>:width/<span class="number">10</span>*<span class="number">8</span>,<span class="attr">width</span>:height/<span class="number">4</span><span class="number">-10</span>&#125;&#125;&gt;</span><br><span class="line">                    &lt;View style=&#123;&#123;<span class="attr">alignItems</span>:<span class="string">'center'</span>,<span class="attr">justifyContent</span>:<span class="string">'space-around'</span>,<span class="attr">backgroundColor</span>:<span class="string">'black'</span>,<span class="attr">width</span>:<span class="number">30</span>,<span class="attr">height</span>:width/<span class="number">10</span>*<span class="number">8</span><span class="number">-10</span>&#125;&#125;&gt;</span><br><span class="line">                        &#123;<span class="keyword">this</span>.arrRightTrangle&#125;</span><br><span class="line"></span><br><span class="line">                    &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>View&gt;</span><br><span class="line">            &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以用这个方式修改虚拟dom的样式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">changeChild(key) &#123;</span><br><span class="line">        <span class="keyword">var</span> oldArr1=<span class="keyword">this</span>.state.arr1.split(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span>(oldArr1[key]==<span class="number">0</span>)&#123;</span><br><span class="line">            oldArr1[key]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">this</span>.arr1[key].props.style.backgroundColor=<span class="string">'red'</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            oldArr1[key]=<span class="number">0</span></span><br><span class="line">            <span class="keyword">this</span>.arr1[key].props.style.backgroundColor=<span class="string">'white'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> newArr1=oldArr1.join(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            arr1:newArr1</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.setUpdate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用react做了三个项目了，慢慢的感受到了虚拟dom的便利，但是稍有稍有不慎还是会报错&lt;/p&gt;
&lt;p&gt;#&lt;br&gt;#&lt;br&gt;#&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>千道前端面试题</title>
    <link href="http://fendicloser.top/2019/02/19/%E5%8D%83%E9%81%93%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://fendicloser.top/2019/02/19/千道前端面试题/</id>
    <published>2019-02-19T15:02:16.000Z</published>
    <updated>2019-02-21T15:02:08.516Z</updated>
    
    <content type="html"><![CDATA[<p>整理常见面试题</p><h4 id="1-ES6-里-let-和-var-的区别"><a href="#1-ES6-里-let-和-var-的区别" class="headerlink" title="1. ES6 里 let 和 var 的区别"></a>1. ES6 里 let 和 var 的区别</h4><p>答： 首先let不能重复声明，var的作用域被规定为一个函数作用域，而let则被规定为块作用域，块作用域要比函数作用域小一些，但是如果两者既没在函数中，也没在块作用域中定义，那么两者都属于全局作用域。let可以防止变量污染，比如for循环中的let，只能在这个for循环中用到。</p><h4 id="2-简述事件委托机制（事件捕获、冒泡，父元素监听）"><a href="#2-简述事件委托机制（事件捕获、冒泡，父元素监听）" class="headerlink" title="2. 简述事件委托机制（事件捕获、冒泡，父元素监听）"></a>2. 简述事件委托机制（事件捕获、冒泡，父元素监听）</h4><p>答： 要用明白事件委托就得先知道事件捕获和冒泡，</p><p>   事件冒泡是指一个元素接收到事件后会向他的父级传递事件，一直到window，</p><p>   事件捕获是指从dom的根开始事件被从目标元素的所以祖先元素开始向下传递，div.addEventListener(‘click’,function(){},true), 这第三个元素为true时就是捕获获取，默认为冒泡获取。</p><p>   事件委托就是把子元素的事件放在父元素上，这样能提高性能，缩短查找dom的事件，第二，新的子元素也有相同的事件。<br>   当需要停止冒泡行为时，可以使用</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>) </span></span><br><span class="line"><span class="function">   </span>&#123;  <span class="comment">//如果提供了事件对象，则这是一个非IE浏览器 </span></span><br><span class="line">       <span class="keyword">if</span> ( e &amp;&amp; e.stopPropagation )      <span class="comment">//因此它支持W3C的stopPropagation()方法 </span>     </span><br><span class="line">             e.stopPropagation();  </span><br><span class="line">       <span class="keyword">else</span>      <span class="comment">//否则，我们需要使用IE的方式来取消事件冒泡 </span>     </span><br><span class="line">             <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   当需要阻止默认行为时，可以使用·<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code from http://caibaojian.com/javascript-stoppropagation-preventdefault.html</span> </span><br><span class="line"><span class="comment">// 阻止浏览器的默认行为 </span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span>(<span class="params"> e </span>) </span></span><br><span class="line"><span class="function"></span>&#123;      <span class="comment">//阻止默认浏览器动作(W3C) </span>     </span><br><span class="line">     <span class="keyword">if</span> ( e &amp;&amp; e.preventDefault )          </span><br><span class="line">         e.preventDefault();      </span><br><span class="line">     <span class="comment">//IE中阻止函数器默认动作的方式 </span>     </span><br><span class="line">     <span class="keyword">else</span>          </span><br><span class="line">         <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;      </span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-HTTP-里的304状态码了解吗？"><a href="#3-HTTP-里的304状态码了解吗？" class="headerlink" title="3. HTTP 里的304状态码了解吗？"></a>3. HTTP 里的304状态码了解吗？</h4><p>答：404页面不存在，500服务器错误，301重定向，302临时重定向，200ok，401未授权啥的。304协商缓存</p><h4 id="4-协商缓存304"><a href="#4-协商缓存304" class="headerlink" title="4. 协商缓存304"></a>4. 协商缓存304</h4><p>答：浏览器缓存分为强制缓存和协商缓存，优先读取强制缓存。<br>     强制缓存分为expires和cache-control，而expires是一个特定的时间，是比较旧的标准和cache-control通常是一个具体的时间长度，比较新，优先级也比较高。</p><p>   而协商缓存包括etag和last-modified，last-modified的设置标准是资源的上次修改时间，而etag是为了应对资源修改时间可能很频繁的情况出现的，是基于资源的内容计算出来的值，因此优先级也较高。<br>     协商缓存与强制缓存的区别在于强制缓存不需要访问服务器，返回结果是200，协商缓存需要访问服务器，如果命中缓存的话，返回结果是304。</p><h4 id="5-HTTP-、-HTTPS-、-HTTP2-的区别？"><a href="#5-HTTP-、-HTTPS-、-HTTP2-的区别？" class="headerlink" title="5. HTTP 、 HTTPS 、 HTTP2 的区别？"></a>5. HTTP 、 HTTPS 、 HTTP2 的区别？</h4><p>答： HTTP1.0和HTTP1.1区别：<br> 缓存处理，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</p><p>带宽优化及网络连接的使用，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p><p>错误通知的管理，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p><p>Host头处理，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p><p>长连接，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点<br>HTTPS HTTPS就是安全版的HTTP，并且由于当今时代对安全性要求更高,需要到CA申请证书，一般免费证书很少，需要交费。HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。<br>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443.HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。</p><h5 id="HTTPS改造"><a href="#HTTPS改造" class="headerlink" title="HTTPS改造"></a>HTTPS改造</h5><p>如果一个网站要全站由HTTP替换成HTTPS，可能需要关注以下几点：</p><ul><li>安装CA证书，一般的证书都是需要收费的，这边推荐一个比较好的购买证书网站：1）Let’s Encrypt，免费，快捷，支持多域名（不是通配符），三条命令即时签署+导出证书。缺点是暂时只有三个月有效期，到期需续签。2Comodo PositiveSSL，收费，但是比较稳定。 </li><li>在购买证书之后，在证书提供的网站上配置自己的域名，将证书下载下来之后，配置自己的web服务器，同时进行代码改造。 </li><li>HTTPS 降低用户访问速度。SSL握手，HTTPS 对速度会有一定程度的降低，但是只要经过合理优化和部署，HTTPS 对速度的影响完全可以接受。在很多场景下，HTTPS 速度完全不逊于 HTTP，如果使用 SPDY，HTTPS 的速度甚至还要比 HTTP 快。 </li><li>相对于HTTPS降低访问速度，其实更需要关心的是服务器端的CPU压力，HTTPS中大量的密钥算法计算，会消耗大量的CPU资源，只有足够的优化，HTTPS 的机器成本才不会明显增加。 </li></ul><h5 id="HTTP2-0的前世今生"><a href="#HTTP2-0的前世今生" class="headerlink" title="HTTP2.0的前世今生"></a>HTTP2.0的前世今生</h5><p>顾名思义有了HTTP1.x，那么HTTP2.0也就顺理成章的出现了。HTTP2.0可以说是SPDY的升级版（其实原本也是基于SPDY设计的），但是，HTTP2.0 跟 SPDY 仍有不同的地方，主要是以下两点：</p><ul><li>HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS </li><li>HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE <h5 id="HTTP2-0的新特性"><a href="#HTTP2-0的新特性" class="headerlink" title="HTTP2.0的新特性"></a>HTTP2.0的新特性</h5></li><li>新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。 </li><li>多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。  </li><li>header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。 </li><li>服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。目前，有大多数网站已经启用HTTP2.0，例如YouTuBe，淘宝网等网站，利用chrome控制台可以查看是否启用H2： </li></ul><h4 id="题：简述一下用户访问网站的过程（缓存，DNS查询，建立链接，请求，响应，收到页面，解析DOM树，显示内容，首屏加载完成，可交互）"><a href="#题：简述一下用户访问网站的过程（缓存，DNS查询，建立链接，请求，响应，收到页面，解析DOM树，显示内容，首屏加载完成，可交互）" class="headerlink" title="题：简述一下用户访问网站的过程（缓存，DNS查询，建立链接，请求，响应，收到页面，解析DOM树，显示内容，首屏加载完成，可交互）"></a>题：简述一下用户访问网站的过程（缓存，DNS查询，建立链接，请求，响应，收到页面，解析DOM树，显示内容，首屏加载完成，可交互）</h4><p>client发出请求解析域名<a href="http://www.qq.com的报文" target="_blank" rel="noopener">www.qq.com的报文</a> 本地的域名服务器收到请求后, 查询本地缓存, 假设没有该纪录, 则本地域名服务器（每个地方的本地服务器不同，这里不详细说明了）则向根域名服务器发出请求解析域名www。<br>  qq。com。根域名服务器。收到请求后查询本地记录得到如下结果:qq。com NS dns。qq。com 。同时给出dns。qq。com的地址,并将结果返回给本地域名服务器。本地域名服务器收到根域名服务器的回应后 再发出请求解析www。qq。<br>  com的报文 根域名服务器收到本地域名服务器的请求后 找到一条www。qq。com A 119。147。74。18（假设www。qq。com的地址是119。147。74。18） 并将结果返回给客户机本地域名服务器 客户机域名服务器将返回的结果保存到本地缓存,同时将结果返回给客户机。<br>   这样就完成了一次域名解析，要成功访问某网站 实际就是解析某网站的域名 不知道这样你明白了没有。</p><p>  换种说法：<br>   输入网址,然后按回车,浏览器连接dns服务器,查找你输入的域名对应的ip地址,查到ip地址以后,浏览器连接该ip地址的80端口,发送查询网页请求,web服务器收到查询请求,发送被查询网页给请求浏览器,一次访问完成.</p><h4 id="题：列举数组的用法（建议分类列举，栈、队列、映射、删除等）"><a href="#题：列举数组的用法（建议分类列举，栈、队列、映射、删除等）" class="headerlink" title="题：列举数组的用法（建议分类列举，栈、队列、映射、删除等）"></a>题：列举数组的用法（建议分类列举，栈、队列、映射、删除等）</h4><h4 id="题：数组去重（直接倒进集合再倒出来）"><a href="#题：数组去重（直接倒进集合再倒出来）" class="headerlink" title="题：数组去重（直接倒进集合再倒出来）"></a>题：数组去重（直接倒进集合再倒出来）</h4><h4 id="题：跨域（图像ping，-JSONP-，-CORS-，-webSocket-等）"><a href="#题：跨域（图像ping，-JSONP-，-CORS-，-webSocket-等）" class="headerlink" title="题：跨域（图像ping， JSONP ， CORS ， webSocket 等）"></a>题：跨域（图像ping， JSONP ， CORS ， webSocket 等）</h4><h4 id="题：本地存储（-cookie-，-localStorage-，-sessionStorage-等）"><a href="#题：本地存储（-cookie-，-localStorage-，-sessionStorage-等）" class="headerlink" title="题：本地存储（ cookie ， localStorage ， sessionStorage 等）"></a>题：本地存储（ cookie ， localStorage ， sessionStorage 等）</h4><h4 id="题：HTTP-，-TCP-，-UDP-，-IP-（参看计算机网络教材）"><a href="#题：HTTP-，-TCP-，-UDP-，-IP-（参看计算机网络教材）" class="headerlink" title="题：HTTP ， TCP ， UDP ， IP （参看计算机网络教材）"></a>题：HTTP ， TCP ， UDP ， IP （参看计算机网络教材）</h4><h4 id="题：进程通信，有名和匿名管道（有名管道和无名管道）"><a href="#题：进程通信，有名和匿名管道（有名管道和无名管道）" class="headerlink" title="题：进程通信，有名和匿名管道（有名管道和无名管道）"></a>题：进程通信，有名和匿名管道（有名管道和无名管道）</h4><h4 id="编程：给定一个数组和一个正整数N，求一个和小于N的最长连续子数组"><a href="#编程：给定一个数组和一个正整数N，求一个和小于N的最长连续子数组" class="headerlink" title="编程：给定一个数组和一个正整数N，求一个和小于N的最长连续子数组"></a>编程：给定一个数组和一个正整数N，求一个和小于N的最长连续子数组</h4><h4 id="编程：CSS-的单行和多行截断？"><a href="#编程：CSS-的单行和多行截断？" class="headerlink" title="编程：CSS 的单行和多行截断？"></a>编程：CSS 的单行和多行截断？</h4><h4 id="编程：两栏布局，左边定宽右边自适应，等高"><a href="#编程：两栏布局，左边定宽右边自适应，等高" class="headerlink" title="编程：两栏布局，左边定宽右边自适应，等高"></a>编程：两栏布局，左边定宽右边自适应，等高</h4><h4 id="编程：给定两个有序数组，合并为一个有序数组。不许使用-js-的-concat-和-sort-方法"><a href="#编程：给定两个有序数组，合并为一个有序数组。不许使用-js-的-concat-和-sort-方法" class="headerlink" title="编程：给定两个有序数组，合并为一个有序数组。不许使用 js 的 concat 和 sort 方法"></a>编程：给定两个有序数组，合并为一个有序数组。不许使用 js 的 concat 和 sort 方法</h4><h4 id="题：简述自定义事件实现方法"><a href="#题：简述自定义事件实现方法" class="headerlink" title="题：简述自定义事件实现方法"></a>题：简述自定义事件实现方法</h4><h4 id="题：简述-getter-和-setter-写法"><a href="#题：简述-getter-和-setter-写法" class="headerlink" title="题：简述 getter 和 setter 写法"></a>题：简述 getter 和 setter 写法</h4><h4 id="题：TCP-三次握手和四次挥手，拥塞控制"><a href="#题：TCP-三次握手和四次挥手，拥塞控制" class="headerlink" title="题：TCP 三次握手和四次挥手，拥塞控制"></a>题：TCP 三次握手和四次挥手，拥塞控制</h4><h4 id="题：跨域方式（-JSONP-webSocket-等，但原理要搞懂）"><a href="#题：跨域方式（-JSONP-webSocket-等，但原理要搞懂）" class="headerlink" title="题：跨域方式（ JSONP , webSocket 等，但原理要搞懂）"></a>题：跨域方式（ JSONP , webSocket 等，但原理要搞懂）</h4><h4 id="题：Cookie-相关的头字段和格式"><a href="#题：Cookie-相关的头字段和格式" class="headerlink" title="题：Cookie 相关的头字段和格式"></a>题：Cookie 相关的头字段和格式</h4><p>Domin 域<br>Expires      绝对过期时间，<br>Max-Age   如3600 相对过期时间<br>Path=/       路径<br>Secure      只在https下发送<br>HttpOnly    不能通过js的document。cookie访问</p><h4 id="题：document-cookie-的格式，写一个封装后的函数"><a href="#题：document-cookie-的格式，写一个封装后的函数" class="headerlink" title="题：document.cookie 的格式，写一个封装后的函数"></a>题：document.cookie 的格式，写一个封装后的函数</h4><h4 id="题：session-原理（基于-Cookie-，或查询字符串，或-ETag-）"><a href="#题：session-原理（基于-Cookie-，或查询字符串，或-ETag-）" class="headerlink" title="题：session 原理（基于 Cookie ，或查询字符串，或 ETag ）"></a>题：session 原理（基于 Cookie ，或查询字符串，或 ETag ）</h4><h4 id="编程：手写代码，不产生新数组，删除数组里的重复元素（排序，-splice-）"><a href="#编程：手写代码，不产生新数组，删除数组里的重复元素（排序，-splice-）" class="headerlink" title="编程：手写代码，不产生新数组，删除数组里的重复元素（排序， splice() ）"></a>编程：手写代码，不产生新数组，删除数组里的重复元素（排序， splice() ）</h4><h4 id="题：ajax-的原生写法（创建-XHR-对象，-open-，-setRequestHeader-，"><a href="#题：ajax-的原生写法（创建-XHR-对象，-open-，-setRequestHeader-，" class="headerlink" title="题：ajax 的原生写法（创建 XHR 对象， open() ， setRequestHeader() ，"></a>题：ajax 的原生写法（创建 XHR 对象， open() ， setRequestHeader() ，</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理常见面试题&lt;/p&gt;
&lt;h4 id=&quot;1-ES6-里-let-和-var-的区别&quot;&gt;&lt;a href=&quot;#1-ES6-里-let-和-var-的区别&quot; class=&quot;headerlink&quot; title=&quot;1. ES6 里 let 和 var 的区别&quot;&gt;&lt;/a&gt;1. ES6 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-native横屏时模态框ios异常</title>
    <link href="http://fendicloser.top/2019/02/19/react-native%E6%A8%AA%E5%B1%8F%E6%97%B6%E6%A8%A1%E6%80%81%E6%A1%86ios%E5%BC%82%E5%B8%B8/"/>
    <id>http://fendicloser.top/2019/02/19/react-native横屏时模态框ios异常/</id>
    <published>2019-02-19T12:24:30.000Z</published>
    <updated>2019-02-19T13:13:26.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>使用’react-native-orientation’，在componentDidMount()里设置Orientation.lockToLandscape()横屏。这个时候使用<modal>在ios中就会报错。又是一个react native兼容性上的问题，来看看官方的解释：</modal></p><p><img src="/2019/02/19/react-native横屏时模态框ios异常/957.jpg" alt></p><p>也就是说，react-native需要UISupportedInterfaceOrientations的用户持久化信息。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这是周一遇到的一个小bug，很基础所以正好写在这里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Modal</span><br><span class="line">      animationType=&#123;<span class="string">'slide'</span>&#125;</span><br><span class="line">      onRequestClose=&#123;()=&gt;<span class="built_in">console</span>.warn(<span class="string">"this is a close request"</span>)&#125;</span><br><span class="line">      visible=&#123;<span class="keyword">this</span>.state.showModal&#125;</span><br><span class="line">      supportedOrientations=&#123;[<span class="string">'portrait'</span>,<span class="string">'landscape'</span>]&#125;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;View&gt;<span class="xml"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/Modal&gt;</span></span><br></pre></td></tr></table></figure><p>最终要的就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supportedOrientations=&#123;[&apos;portrait&apos;,&apos;landscape&apos;]&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意一下，modal这个组件非常的奇葩，还有一个必须设置的属性是onRequestClose，这个属性在Android平台上是必需函数。</p><h2 id="Ps"><a href="#Ps" class="headerlink" title="Ps"></a>Ps</h2><p>本人第一篇blog，刻意的加上了图片和代码段，也可以加rtc之类的。用的是开源的hexo，从知道hexo到写出这篇blog大概用了三个小时，所以还是相当好上手的。 您要是跟我说没有csdn或简书看着爽就出门左转吧。</p><p>挂到github上了，域名是从阿里云买的：<a href="http://fendicloser.top">http://fendicloser.top</a> ， 第一年9块钱，.com或.cn需要50多一年，支持https。 theme用的是svdb.co的flexy，自适应css、jade，简约但是很遗憾没有评论的功能。</p><p>以后还是会以js、react脚手架、树莓派为主要内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;使用’react-native-orientation’，在componentDidMount()里设置Orientation.lockTo
      
    
    </summary>
    
    
  </entry>
  
</feed>
