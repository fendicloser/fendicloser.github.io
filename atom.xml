<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longfu Sun</title>
  
  <subtitle>Live a life you will remember</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fendicloser.top/"/>
  <updated>2019-02-19T15:08:57.695Z</updated>
  <id>http://fendicloser.top/</id>
  
  <author>
    <name>Longfu Sun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>千道前端面试题</title>
    <link href="http://fendicloser.top/2019/02/19/%E5%8D%83%E9%81%93%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://fendicloser.top/2019/02/19/千道前端面试题/</id>
    <published>2019-02-19T15:02:16.000Z</published>
    <updated>2019-02-19T15:08:57.695Z</updated>
    
    <content type="html"><![CDATA[<p>整理常见面试题</p><h4 id="1-ES6-里-let-和-var-的区别"><a href="#1-ES6-里-let-和-var-的区别" class="headerlink" title="1. ES6 里 let 和 var 的区别"></a>1. ES6 里 let 和 var 的区别</h4><p>答： 首先let不能重复声明，var的作用域被规定为一个函数作用域，而let则被规定为块作用域，块作用域要比函数作用域小一些，但是如果两者既没在函数中，也没在块作用域中定义，那么两者都属于全局作用域。let可以防止变量污染，比如for循环中的let，只能在这个for循环中用到。</p><h4 id="2-简述事件委托机制（事件捕获、冒泡，父元素监听）"><a href="#2-简述事件委托机制（事件捕获、冒泡，父元素监听）" class="headerlink" title="2. 简述事件委托机制（事件捕获、冒泡，父元素监听）"></a>2. 简述事件委托机制（事件捕获、冒泡，父元素监听）</h4><p>答： 要用明白事件委托就得先知道事件捕获和冒泡，</p><p>   事件冒泡是指一个元素接收到事件后会向他的父级传递事件，一直到window，</p><p>   事件捕获是指从dom的根开始事件被从目标元素的所以祖先元素开始向下传递，div.addEventListener(‘click’,function(){},true), 这第三个元素为true时就是捕获获取，默认为冒泡获取。</p><p>   事件委托就是把子元素的事件放在父元素上，这样能提高性能，缩短查找dom的事件，第二，新的子元素也有相同的事件。<br>   当需要停止冒泡行为时，可以使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理常见面试题&lt;/p&gt;
&lt;h4 id=&quot;1-ES6-里-let-和-var-的区别&quot;&gt;&lt;a href=&quot;#1-ES6-里-let-和-var-的区别&quot; class=&quot;headerlink&quot; title=&quot;1. ES6 里 let 和 var 的区别&quot;&gt;&lt;/a&gt;1. ES6 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-native横屏时模态框ios异常</title>
    <link href="http://fendicloser.top/2019/02/19/react-native%E6%A8%AA%E5%B1%8F%E6%97%B6%E6%A8%A1%E6%80%81%E6%A1%86ios%E5%BC%82%E5%B8%B8/"/>
    <id>http://fendicloser.top/2019/02/19/react-native横屏时模态框ios异常/</id>
    <published>2019-02-19T12:24:30.000Z</published>
    <updated>2019-02-19T13:13:26.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>使用’react-native-orientation’，在componentDidMount()里设置Orientation.lockToLandscape()横屏。这个时候使用<modal>在ios中就会报错。又是一个react native兼容性上的问题，来看看官方的解释：</modal></p><p><img src="/2019/02/19/react-native横屏时模态框ios异常/957.jpg" alt></p><p>也就是说，react-native需要UISupportedInterfaceOrientations的用户持久化信息。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这是周一遇到的一个小bug，很基础所以正好写在这里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Modal</span><br><span class="line">      animationType=&#123;<span class="string">'slide'</span>&#125;</span><br><span class="line">      onRequestClose=&#123;()=&gt;<span class="built_in">console</span>.warn(<span class="string">"this is a close request"</span>)&#125;</span><br><span class="line">      visible=&#123;<span class="keyword">this</span>.state.showModal&#125;</span><br><span class="line">      supportedOrientations=&#123;[<span class="string">'portrait'</span>,<span class="string">'landscape'</span>]&#125;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;View&gt;&lt;/View&gt;</span><br><span class="line">&lt;<span class="regexp">/Modal&gt;</span></span><br></pre></td></tr></table></figure><p>最终要的就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supportedOrientations=&#123;[&apos;portrait&apos;,&apos;landscape&apos;]&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意一下，modal这个组件非常的奇葩，还有一个必须设置的属性是onRequestClose，这个属性在Android平台上是必需函数。</p><h2 id="Ps"><a href="#Ps" class="headerlink" title="Ps"></a>Ps</h2><p>本人第一篇blog，刻意的加上了图片和代码段，也可以加rtc之类的。用的是开源的hexo，从知道hexo到写出这篇blog大概用了三个小时，所以还是相当好上手的。 您要是跟我说没有csdn或简书看着爽就出门左转吧。</p><p>挂到github上了，域名是从阿里云买的：<a href="http://fendicloser.top">http://fendicloser.top</a> ， 第一年9块钱，.com或.cn需要50多一年，支持https。 theme用的是svdb.co的flexy，自适应css、jade，简约但是很遗憾没有评论的功能。</p><p>以后还是会以js、react脚手架、树莓派为主要内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;使用’react-native-orientation’，在componentDidMount()里设置Orientation.lockTo
      
    
    </summary>
    
    
  </entry>
  
</feed>
